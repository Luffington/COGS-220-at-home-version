#include <Wire.h>
#include <ZumoShield.h>

ZumoMotors motors;
ZumoReflectanceSensorArray linesensors(QTR_NO_EMITTER_PIN);
ZumoBuzzer buzzer;
Pushbutton button(ZUMO_BUTTON);

void setup() {
 

  int i;
  int spin_direction = 1;
  motors.setSpeeds(120 * spin_direction, -120 * spin_direction);
  for (i = 0; i < 80; i++) {
    linesensors.calibrate();
    if (i % 40 == 20) {
      spin_direction = -spin_direction;
      motors.setSpeeds(120 * spin_direction, -120 * spin_direction);
    }
    delay(8);
  }

  motors.setSpeeds(0, 0);
  delay(500);
}

//////////////////////////////////////////////////////////////////////////////
unsigned int sensor_vals[6];
int THRESHOLD = 400;
int BASE_SPEED = 250;
//int BASE_TURN_SPEED = 150;
int line_position;
char path[50];
int turn_counter = 0;
bool finish_detected = false;

int INTERSECTION_LEFT_TURN = 0;
int INTERSECTION_RIGHT_TURN = 1;
int INTERSECTION_T = 2;
int INTERSECTION_CROSS = 3;
int INTERSECTION_LEFT_T = 4;
int INTERSECTION_RIGHT_T = 5;
int FINISH = 6;
int NO_INTERSECTION = 7;


/////////////////////////////////////////////////////////////////////////
//LOOP SECTION///////////////////////////////
/////////////////////////////////////////////////////////////////////////
void loop() {
  line_position = linesensors.readLine(sensor_vals);

  bool line_on_left = sensor_vals[0] > THRESHOLD;
  bool line_on_right = sensor_vals[5] > THRESHOLD;

  int intersection_type = NO_INTERSECTION;

  if (line_on_left || line_on_right) {
    motors.setSpeeds(BASE_SPEED, BASE_SPEED);
    // buzzer.playNote(NOTE_C(7), 100, 15);
    intersection_type = get_intersection_type();
  }

  if (intersection_type == NO_INTERSECTION && sensor_vals[1] < THRESHOLD && sensor_vals[2] < THRESHOLD && sensor_vals[3] < THRESHOLD && sensor_vals[4] < THRESHOLD) {
    path[turn_counter] = 'U';
    turn_counter++;
    u_turn();
  }

  if (intersection_type == INTERSECTION_LEFT_T) {
    path[turn_counter] = 'S';
    turn_counter++;
    delay(300); ///DELAY TO STOP THE DOUBLE S RECORDING PROBLEM
    follow_line(); 
  }
  if (intersection_type == INTERSECTION_RIGHT_TURN ||
      intersection_type == INTERSECTION_RIGHT_T ||
      intersection_type == INTERSECTION_CROSS ||
      intersection_type == INTERSECTION_T) {
    path[turn_counter] = 'R';
    turn_counter++;
    turn_right();
  }
  if (intersection_type == INTERSECTION_LEFT_TURN) {
    path[turn_counter] = 'L';
    turn_counter++;
    turn_left();
  }
  if (intersection_type == NO_INTERSECTION) {
    follow_line();
  }
  if (intersection_type == FINISH) {
    solved();
  }
}
///////////////////////////////////////////////
// GET INTERSECTION TYPE FUNCTION
///////////////////////////////////////////////

int get_intersection_type() {

  bool line_on_left = sensor_vals[0] > THRESHOLD;
  bool line_on_right = sensor_vals[5] > THRESHOLD;

  bool line_on_left_ever = line_on_left;
  bool line_on_right_ever = line_on_right;


  int finish_counter = 0;

  while (line_on_left || line_on_right) {
    linesensors.readCalibrated(sensor_vals);
    line_on_left = sensor_vals[0] > THRESHOLD && sensor_vals[1] > THRESHOLD;
    line_on_right = sensor_vals[5] > THRESHOLD && sensor_vals[4] > THRESHOLD;



    line_on_left_ever = line_on_left || line_on_left_ever;
    line_on_right_ever = line_on_right || line_on_right_ever;

    finish_counter++;
    if (finish_counter > 40) {
      //buzzer.play("O6c32d32e32f32g32");
      //buzzer.playNote(NOTE_C(3), 5000, 15);
      //while(1) { }
      // motors.setSpeeds(0,0);
      ; return FINISH;
    }
  }

  bool line_straight = sensor_vals[2] > THRESHOLD || sensor_vals[3] > THRESHOLD;

  if (!line_straight && line_on_left_ever && line_on_right_ever) {
    buzzer.play("O6c32c32c32");
    return INTERSECTION_T;
  }
  if (line_straight && line_on_left_ever && line_on_right_ever) {
    buzzer.play("O6c32e32c32");
    return INTERSECTION_CROSS;
  }
  if (!line_straight && !line_on_right_ever) {
    buzzer.play("O6c32d32e32");
    return INTERSECTION_LEFT_TURN;
  }
  if (!line_straight && !line_on_left_ever) {
    buzzer.play("O6e32d32c32");
    return INTERSECTION_RIGHT_TURN;

  }
  if (line_straight && !line_on_right_ever) {
    buzzer.play("O6e32d32e32");
    return INTERSECTION_LEFT_T;
    //buzzer.playNote(NOTE_C(3), 5000, 15);
    //while(1) { }
  }
  if (line_straight && !line_on_left_ever) {
    buzzer.play("O6c32d32c32");
    return INTERSECTION_RIGHT_T;
  }
}



/////////////////////////////////////////////////
// LEFT AND RIGHT TURN FUNCTIONS
/////////////////////////////////////////////////

  double TURN_LEFT_PROPORTION_GAIN = 14; // 0.3
  double TURN_LEFT_DERIVATIVE_GAIN = 3; //
  int lastLeftTurnError = 0;


void turn_left() {
   int left_turn_error = line_position - 2500;
    int left_turn_error_change = left_turn_error - lastLeftTurnError;
    //calculate motor differential
    //old code: int speedDifference = (error / 4) + (error-lastError)*6;
    int leftWheelTurnSpeed1 = BASE_SPEED + TURN_LEFT_PROPORTION_GAIN * left_turn_error + TURN_LEFT_DERIVATIVE_GAIN * left_turn_error_change;
    int rightWheelTurnSpeed1 = BASE_SPEED + -TURN_LEFT_PROPORTION_GAIN * left_turn_error + -TURN_LEFT_DERIVATIVE_GAIN * left_turn_error_change;
    lastLeftTurnError = left_turn_error;
  motors.setSpeeds(leftWheelTurnSpeed1, rightWheelTurnSpeed1);
 delay(300);
  while (sensor_vals[3] > THRESHOLD) {
    linesensors.readCalibrated(sensor_vals);
     
  }
  while (sensor_vals[3] < THRESHOLD) {
    linesensors.readCalibrated(sensor_vals);
  }

}
 double TURN_RIGHT_PROPORTION_GAIN = 14; // 0.3
  double TURN_RIGHT_DERIVATIVE_GAIN = 3; //
  int lastRightTurnError = 0;


void turn_right() {
  int right_turn_error = line_position - 2500;
    int right_turn_error_change = right_turn_error - lastRightTurnError;
    //calculate motor differential
    //old code: int speedDifference = (error / 4) + (error-lastError)*6;
    int leftWheelTurnSpeed2 = BASE_SPEED + TURN_RIGHT_PROPORTION_GAIN * right_turn_error + TURN_RIGHT_DERIVATIVE_GAIN * right_turn_error_change;
    int rightWheelTurnSpeed2 = BASE_SPEED + -TURN_RIGHT_PROPORTION_GAIN * right_turn_error + -TURN_RIGHT_DERIVATIVE_GAIN * right_turn_error_change;
    lastRightTurnError = right_turn_error;    
  motors.setSpeeds(leftWheelTurnSpeed2, rightWheelTurnSpeed2);
   delay(300);
  while (sensor_vals[2] > THRESHOLD) {
    linesensors.readCalibrated(sensor_vals);
   
  }
  while (sensor_vals[2] < THRESHOLD) {
    linesensors.readCalibrated(sensor_vals);
  }
}

void u_turn() {
  motors.setSpeeds(-BASE_SPEED, BASE_SPEED);
  while (sensor_vals[0] < THRESHOLD) {
    line_position = linesensors.readLine(sensor_vals);
  }
  while (line_position > 3000 || line_position < 2000) {
    line_position = linesensors.readLine(sensor_vals);
  }
}

//////////////////////////////////////////////
//SOLVED FUNCTION
//////////////////////////////////////////////


void solved() {
  motors.setSpeeds(0,0);
  
  for (int i = 0; i < turn_counter + 1; i++) {
    if (path[i] == 'L') {
      //buzzer.playNote(NOTE_G(6), 100, 15);
      //delay(200);
     // buzzer.playNote(NOTE_G(6), 100, 15);
      //delay(800);
    }
    if (path[i] == 'R') {
     // buzzer.playNote(NOTE_G(6), 100, 15);
     // delay(200);
      //buzzer.playNote(NOTE_G(6), 100, 15);
      //delay(200);
      //buzzer.playNote(NOTE_G(6), 100, 15);
      //delay(800);
    }
      if (path[i] == 'S') {
       // buzzer.playNote(NOTE_G(6), 100, 15);
        //delay(200);
      }
      if (path[i] == 'U') {
       // buzzer.playNote(NOTE_C(6), 100, 15);
       // delay(200);
      }
      
    }
    path_reduce();


      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 400, 15);
      delay(400);
      buzzer.playNote(NOTE_A_FLAT(4), 400, 15);
      delay(400);
      buzzer.playNote(NOTE_B_FLAT(4), 400, 15);
      delay(400);
      buzzer.playNote(NOTE_C(5), 100, 15);
      delay(300);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 400, 15);
      delay(600);
      ////FIRST CHUNK (START)
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(200);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      ///SECOND CHUNK
      buzzer.playNote(NOTE_A(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A(4), 80, 15);
      delay(200);
      buzzer.playNote(NOTE_A(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      ///THIRD CHUNK
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(200);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_F(4), 80, 15);
      delay(100);
      ////FOURTH CHUNK
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_E(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(200);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_E(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_C(5), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_B_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_A_FLAT(4), 80, 15);
      delay(100);
      buzzer.playNote(NOTE_E(4), 80, 15);
      delay(100);


    button.waitForButton();

    for(int i = 0; i < turn_counter; i++){
    }
    buzzer.play("06 d32a32");
    delay(1000);

    runSolvedMaze();
  }

  //////////////////////////////////////////
  //PID CONTROLLER FUNCTION
  //////////////////////////////////////////

  double PROPORTION_GAIN = 0.3;
  double DERIVATIVE_GAIN = 1;
  int lastError = 0;

  void follow_line() {
    int error = line_position - 2500;
    int error_change = error - lastError;
    //calculate motor differential
   
    int leftSpeed = BASE_SPEED + PROPORTION_GAIN * error + DERIVATIVE_GAIN * error_change;
    int rightSpeed = BASE_SPEED + -PROPORTION_GAIN * error + -DERIVATIVE_GAIN * error_change;
    lastError = error;

    motors.setSpeeds(leftSpeed, rightSpeed);
  }
  ///////////////////////////////////////////////////////////

  void runSolvedMaze() {
    int solved_path_location = 0;
    while (true) {
      line_position = linesensors.readLine(sensor_vals);

      bool intersection_detected = sensor_vals[0] > THRESHOLD || sensor_vals[5] > THRESHOLD;

      if (intersection_detected) {
        if (solved_path_location == turn_counter) {
          motors.setSpeeds(0, 0);
          buzzer.play("!T250 O4 L8 g O5 ceg O6 ceg4.e4. O4 a- O5 ce-a- O6 ce-a-4.e-4. O4 b- O5 dfb- O6 df b-4r MS b-b-b- ML O7 c2.");
          break;
        }
        motors.setSpeeds(BASE_SPEED*2, BASE_SPEED*2);
        get_intersection_type();// just to get through the intersection

        if (path[solved_path_location] == 'S') {
          follow_line();
        }
        if (path[solved_path_location] == 'L') {
          turn_left();
        }
        if (path[solved_path_location] == 'R') {
          turn_right();
        }

        solved_path_location++;
      } else {
        follow_line();
      }
    }
    button.waitForButton();

    buzzer.play("O6 d32a32");
    delay(1000);

    runSolvedMaze();
  }

  void path_reduce(){
  bool flag = false;  
  for(int path_location=2; path_location < turn_counter; path_location++){
    if(flag){
      path[path_location-2] = path[path_location];
    } else if(path[path_location-1] == 'U'){
      char a = path[path_location - 2];
      char b = path[path_location];
      char c = ' ';
      int total_angle = 180;
      if(a == 'L'){
        total_angle += 270;
      }
      if(a == 'U'){
        total_angle += 180;
      }
      if(a == 'R'){
        total_angle += 90;
      }
      if(b == 'L'){
        total_angle += 270;
      }
      if(b == 'U'){
        total_angle += 180;
      }
      if(b == 'R'){
        total_angle += 90;
      }
      total_angle = total_angle % 360;
      if(total_angle == 0){
        c = 'S';
      }
      if(total_angle == 90){
        c = 'R';
      }
      if(total_angle == 180){
        c = 'U';
      }
      if(total_angle == 270){
        c = 'L';
      }
      path[path_location - 2] = c;
      flag = true;
    }
  } 
  if(flag){
    turn_counter = turn_counter - 2;
    path[turn_counter] = ' ';
    path[turn_counter + 1] = ' ';
    path_reduce();
  } else {
    return;
  }
}